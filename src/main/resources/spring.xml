<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--扫描组件-->
    <context:component-scan base-package="com.exercise.hutubill">
        <!--排除扫描的包-->
        <context:exclude-filter type="annotation" expression="com.exercise.hutubill.controller"/>
        <context:exclude-filter type="annotation" expression="com.exercise.hutubill.interceptor"/>
    </context:component-scan>

    <!--数据源-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dateSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dateSource"/>
    </bean>

    <!--
   开启事务注解驱动
   将使用注解@Transactional标识的方法或类中所有的方法进行事务管理
   -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dateSource"/>
        <property name="typeAliasesPackage" value="com.exercise.hutubill.pojo"/>
    </bean>

    <!--
        配置mapper接口的扫描，可以将指定包下所有的mapper接口
        通过SqlSession创建代理实现类对象，并将这些对象交给IOC容器管理
        也就是直接使用mapper接口中的方法。可以自动装配mapper实现类
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.exercise.hutubill.mapper"/>
    </bean>

</beans>